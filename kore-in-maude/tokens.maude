---- Terminals / Tokens of the Kore syntax / grammar are defined
---- as Maude constants, simply because Maude does not allows us
---- to define them as regular expressions. 


fmod TOKENS is

  including KORE .

  ---- Terminals of <ObjectSortVariable>
  ---- and how to lift them.
  op S  : -> ObjectSortVariable .
  op S' : -> ObjectSortVariable .
  op S1 : -> ObjectSortVariable .
  op S2 : -> ObjectSortVariable .
  op S3 : -> ObjectSortVariable .
  op R  : -> ObjectSortVariable .

  eq [[(S ).ObjectSortVariable]] = S  : KSort{} .
  eq [[(S').ObjectSortVariable]] = S' : KSort{} .
  eq [[(S1).ObjectSortVariable]] = S1 : KSort{} .
  eq [[(S2).ObjectSortVariable]] = S2 : KSort{} .
  eq [[(S3).ObjectSortVariable]] = S3 : KSort{} .
  eq [[(R ).ObjectSortVariable]] = R  : KSort{} .

  ---- Terminals of <ObjectSortConstructor> 
  ---- and how to lift them.
  op Nat  : -> ObjectSortConstructor .
  op Bool : -> ObjectSortConstructor .
  op AExp : -> ObjectSortConstructor .
  op BExp : -> ObjectSortConstructor .
  op Stmt : -> ObjectSortConstructor .
  op List : -> ObjectSortConstructor .
  op Ctxt : -> ObjectSortConstructor .

  ---- The lower case "k" means they are meta-representations 
  ---- of some object-level things.
  eq [[Nat ]] = kNat {} .
  eq [[Bool]] = kBool{} .
  eq [[AExp]] = kAExp{} .
  eq [[BExp]] = kBExp{} .
  eq [[Stmt]] = kStmt{} .
  eq [[List]] = kList{} .
  eq [[Ctxt]] = kCtxt{} .

  op kNat  : -> MetaSymbolConstructor .
  op kBool : -> MetaSymbolConstructor .
  op kAExp : -> MetaSymbolConstructor .
  op kBExp : -> MetaSymbolConstructor .
  op kStmt : -> MetaSymbolConstructor .
  op kList : -> MetaSymbolConstructor .  
  op kCtxt : -> MetaSymbolConstructor .

  ---- Terminals of <ObjectSymbolConstructor> 
  ---- and how to lift them.
  op ceil      : -> ObjectSymbolConstructor .
  op true      : -> ObjectSymbolConstructor .
  op false     : -> ObjectSymbolConstructor .
  op andBool   : -> ObjectSymbolConstructor . 
  op notBool   : -> ObjectSymbolConstructor . 
  op zero      : -> ObjectSymbolConstructor .
  op succ      : -> ObjectSymbolConstructor .
  op plus      : -> ObjectSymbolConstructor .
  op gte       : -> ObjectSymbolConstructor .
  op nil       : -> ObjectSymbolConstructor .
  op cons      : -> ObjectSymbolConstructor .
  op ctxtapp   : -> ObjectSymbolConstructor .
  op gamma0    : -> ObjectSymbolConstructor .
  op NatToAExp : -> ObjectSymbolConstructor .
  op IdToAExp  : -> ObjectSymbolConstructor .
  op plusAExp  : -> ObjectSymbolConstructor .
  op ite       : -> ObjectSymbolConstructor .

  eq [[ceil     ]] = kceil     {} .
  eq [[true     ]] = ktrue     {} .
  eq [[false    ]] = kfalse    {} .
  eq [[andBool  ]] = kandBool  {} . 
  eq [[notBool  ]] = knotBool  {} . 
  eq [[zero     ]] = kzero     {} .
  eq [[succ     ]] = ksucc     {} .
  eq [[plus     ]] = kplus     {} .
  eq [[gte      ]] = kgte      {} .
  eq [[nil      ]] = knil      {} .
  eq [[cons     ]] = kcons     {} .
  eq [[ctxtapp  ]] = kctxtapp  {} .
  eq [[gamma0   ]] = kgamma0   {} .
  eq [[NatToAExp]] = kNatToAExp{} .
  eq [[IdToAExp ]] = kIdToAExp {} .
  eq [[plusAExp ]] = kplusAExp {} .
  eq [[ite      ]] = kite      {} .

  op kceil      : -> MetaSymbolConstructor .
  op ktrue      : -> MetaSymbolConstructor .
  op kfalse     : -> MetaSymbolConstructor .
  op kandBool   : -> MetaSymbolConstructor .
  op knotBool   : -> MetaSymbolConstructor .
  op kzero      : -> MetaSymbolConstructor .
  op ksucc      : -> MetaSymbolConstructor .
  op kplus      : -> MetaSymbolConstructor .
  op kgte       : -> MetaSymbolConstructor .
  op knil       : -> MetaSymbolConstructor .
  op kcons      : -> MetaSymbolConstructor .
  op kctxtapp   : -> MetaSymbolConstructor .
  op kgamma0    : -> MetaSymbolConstructor .
  op kNatToAExp : -> MetaSymbolConstructor .
  op kIdToAExp  : -> MetaSymbolConstructor .
  op kplusAExp  : -> MetaSymbolConstructor .
  op kite       : -> MetaSymbolConstructor .





   ---- Terminals of <Alias>
  op \or               : -> ObjectAliasConstructor  .
  op \implies          : -> ObjectAliasConstructor  .
  op \iff              : -> ObjectAliasConstructor  .
  op \equals           : -> ObjectAliasConstructor  .
  op \forall           : -> ObjectAliasConstructor  .
  op floor             : -> ObjectAliasConstructor  .
  op gamma             : -> ObjectAliasConstructor  .



  ---- lifting \equals
  eq [[\equals{S1:ObjectSort, S2:ObjectSort}(P1:Pattern, P2:Pattern)]]
   = Kexists{}([[S1:ObjectSort]], [[S2:ObjectSort]], [[P1:Pattern]], [[P2:Pattern]]) .

  eq [[\exists{S1:MetaSort, S2:MetaSort}(P1:Pattern, P2:Pattern)]]
   = \exists{S1:MetaSort, S2:MetaSort}([[P1:Pattern]], [[P2:Pattern]]) .

  ---- Terminals of <VariableName>
  ---- and how to lift them
  op B                 : -> VariableName      .
  op C                 : -> VariableName      .
  op C1                : -> VariableName      .
  op C2                : -> VariableName      .
  op E                 : -> VariableName      .
  op HOLE              : -> VariableName      .
  op L                 : -> VariableName      .
  op L0                : -> VariableName      .
  op P                 : -> VariableName      .
  op Q                 : -> VariableName      .
  op S                 : -> VariableName      .                 
  op S'                : -> VariableName      .
  op S1                : -> VariableName      .
  op S2                : -> VariableName      .
  op S3                : -> VariableName      .
  op R                 : -> VariableName      .
  op X                 : -> VariableName      .
  op Y                 : -> VariableName      .
  op Z                 : -> VariableName      .


  ---- Some frontends sugar that allows use to write
  ---- X:Nat{} instead of X : Nat{} with space around ":".

  op P:KPattern{} : -> Variable . eq P:KPattern{} = P : KPattern{} . 
  op Q:KPattern{} : -> Variable . eq Q:KPattern{} = Q : KPattern{} . 
  op X:S          : -> Variable . eq X:S          = X : S          . 
  op X:S1         : -> Variable . eq X:S1         = X : S1         . 
  op HOLE:S1      : -> Variable . eq HOLE:S1      = HOLE : S1      . 
  op X:Nat{}      : -> Variable . eq X:Nat{}      = X : Nat{}      . 
  op Y:Nat{}      : -> Variable . eq Y:Nat{}      = Y : Nat{}      . 
  op Z:Nat{}      : -> Variable . eq Z:Nat{}      = Z : Nat{}      . 
  op L:List{S}    : -> Variable . eq L:List{S}    = L : List{S}    . 
  op L0:List{S}   : -> Variable . eq L0:List{S}   = L0 : List{S}   . 
  op B:Bool{}     : -> Variable . eq B:Bool{}     = B : Bool{}     . 
  op C:Bool{}     : -> Variable . eq C:Bool{}     = C : Bool{}     . 
  op C1:Bool{}    : -> Variable . eq C1:Bool{}    = C1 : Bool{}    . 
  op C2:Bool{}    : -> Variable . eq C2:Bool{}    = C2 : Bool{}    . 

endfm
