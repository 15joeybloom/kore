---- The Kore Language: A Maude Implementation ----

fmod KORE is

  protecting META-LEVEL *
    (sort Sort     to META-LEVEL.Sort,
     sort Variable to META-LEVEL.Variable) .

  protecting INT .
  protecting STRING .
  protecting CONVERSION .





  ---- Syntax of Kore: BNF grammar followed by the implementation.





  ---- <ObjectSort>  ::= <AtomicObjectSort>
  ----                 | <ParametricObjectSort> "{" <NeObjectSortList> "}"
  ----                 | <ObjectSortVariable>
  ---- <MetaSort>    ::= "KSort"
  ----                 | "KSortList"
  ----                 | "KSymbol"
  ----                 | "KPattern" 
  ----                 | "KPatternList" 
  ----                 | "KString"
  ----                 | <MetaSortVariable> 

  ---- Remark: It is critical that we are able to distintuish object sorts 
  ----         and meta sorts statically (and preferably locally, too).

  sorts ObjectSort MetaSort .

  sort AtomicObjectSort ParametricObjectSort ObjectSortVariable .
  subsorts AtomicObjectSort ObjectSortVariable < ObjectSort .
  op _`{_`} : ParametricObjectSort SortList -> ObjectSort [prec 50] .

  sort MetaSortVariable .
  subsort MetaSortVariable < MetaSort .

  ---- Sort and list of sorts.
  sort Sort SortList .
  subsorts ObjectSort MetaSort < Sort < SortList .
  op . : -> SortList . ---- the empty list
  op _,_ : Sort SortList -> SortList [prec 52] .
  eq S:Sort, . = S:Sort .

 ---- Some utility functions.

  var OS : ObjectSort . var MS : MetaSort .
  var Ss Ss' : SortList .

  ---- Append two lists.
  op _@_ : SortList SortList -> SortList .
  eq . @ Ss = Ss .
  eq S:Sort @ Ss = S:Sort, Ss .
  eq (S:Sort, Ss) @ Ss' = S:Sort, (Ss @ Ss') .

  ---- Length of lists.
  op len : SortList -> Nat .
  eq len((.).SortList) = 0 .
  eq len(S:Sort) = 1 .
  eq len(S:Sort, Ss) = 1 + len(Ss) .





  ---- <Pattern>     ::= <Head> "(" <PatternList> ")"
  ----                 | <VariableName> ":" <ObjectSort>
  ----                 | <VariableName> ":" <MetaSort>
  ----                 | <String>
  ---- <PatternList> ::= ""
  ----                 | <Pattern>
  ----                 | <Pattern> "," <PatternList>

  ---- Remark: Maude cannot parse "", so we use "." instead.

  sorts Pattern PatternList Head VariableName .
  subsort Pattern < PatternList .
  op . : -> PatternList .
  eq P:Pattern, . = P:Pattern .
  op _,_ : Pattern PatternList -> PatternList 
     [format(d d ni d) prec 78] .

  op _`(_`) : Head PatternList -> Pattern 
     [format(d d n++i d --) prec 75] .
  op _:_ : VariableName Sort -> Pattern 
     [prec 75] .
  subsort String < Pattern .

  ---- Help Maude parse the empty pattern list.
  op _`(`) : Head -> Pattern [prec 75] .
  eq H:Head() = H:Head(.) .

  vars Ps Ps' : PatternList .

  ---- Append two lists.
  op _@_ : PatternList PatternList -> PatternList .
  eq . @ Ps = Ps .
  eq P:Pattern @ Ps = P:Pattern, Ps .
  eq (P:Pattern, Ps) @ Ps' = P:Pattern, (Ps @ Ps') .

  ---- Length of lists.
  op len : PatternList -> Nat .
  eq len((.).PatternList) = 0 .
  eq len(P:Pattern) = 1 .
  eq len(P:Pattern, Ps) = 1 + len(Ps) .





  ---- <Head> ::= <ObjectHead> | <MetaHead>
  
  ---- Remark: One design principle of the Kore language is that
  ----         we can tell (locally and statically) whether a head
  ----         is an object-level one or a meta-level one.

  sorts ObjectHead MetaHead . 
  subsorts ObjectHead MetaHead < Head .

  ---- <ObjectHead> ::= <AtomicObjectHead>
  ----                | <ParametricHead> "{" <NeObjectSortList> "}" 
  ---- <MetaHead>   ::= <AtomicMetaHead>
  ----                | <ParametricHead> "{" <NeMetaSortList> "}"

  sorts AtomicObjectHead AtomicMetaHead ParametricHead .
  subsort AtomicObjectHead < ObjectHead .
  subsort AtomicMetaHead < MetaHead .
  op _`{_`} : ParametricHead SortList -> Head [prec 72] .

  var PH : ParametricHead .

  cmb PH{Ss} : ObjectHead
   if isNeObjectSortList(Ss) .
  cmb PH{Ss} : MetaHead
   if isNeMetaSortList(Ss) .

  op isNeObjectSortList : SortList -> Bool .
  op isNeMetaSortList : SortList -> Bool .

  eq isNeObjectSortList(.) = false .
  eq isNeObjectSortList(OS) = true .
  eq isNeObjectSortList(MS) = false .
  eq isNeObjectSortList(OS, Ss) = isNeObjectSortList(Ss) .
  eq isNeObjectSortList(MS, Ss) = false .

  eq isNeMetaSortList(.) = false .
  eq isNeMetaSortList(OS) = false .
  eq isNeMetaSortList(MS) = true .
  eq isNeMetaSortList(OS, Ss) = false .
  eq isNeMetaSortList(MS, Ss) = isNeMetaSortList(Ss) .






  ---- A Kore definition (def.kore) consists of a sequence of declarations.

  ---- <Declaration>  ::= 
  ----   | "sort" <AtomicObjectSort>
  ----   | "sort" <ParametricObjectSort> "{" <NeObjectSortVariableList> "}"
  ----   | "symbol" <ObjectHead> "(" <ObjectSortList> ")" ":" <ObjectSort>
  ----   | "symbol" <MetaHead> "(" <MetaSortList> ")" ":" <MetaSort>
  ----   | "axiom" <Pattern>
  ----   | "axiom" "{" <NeSortVariableList> "}" <Pattern>
  ----   | "alias" 
  ----             <Head> "(" <PatternList> ")" ":=" <Pattern> 
  ----   | "alias" "{" <NeSortVariableList> "}" 
  ----             <Head> "(" <PatternList> ")" ":=" <Pattern> 

  ---- <Declarations> ::= 
  ----   | ""
  ----   | <Declaration>
  ----   | <Declaration> <Declarations>

  ---- Remark: Maude can't parse an empty definition, so we omit that case.

  sorts Declaration Declarations .
  subsort Declaration < Declarations .
  op __ : Declaration Declarations -> Declarations [format(d n d) prec 85] .

  var Decl : Declaration .
  vars Decls Decls' : Declarations .

  ---- Append two declarations.
  op _@_ : Declarations Declarations -> Declarations .
  eq Decl @ Decls = Decl Decls .
  eq (Decl Decls) @ Decls' = Decl (Decls @ Decls') .

  op sort_ : Sort -> Declaration 
     [format(b o d) prec 82] .

  op symbol_`(_`):_ : ObjectHead SortList ObjectSort -> Declaration 
     [format(b o d d d s d d) prec 82] .
  op symbol_`(_`):_ : MetaHead SortList MetaSort -> Declaration 
     [format(b o d d d s d d) prec 82] .

  op axiom_    : Pattern -> Declaration 
     [format(b on++i --) prec 82] .
  op axiom{_}_ : SortList Pattern -> Declaration 
     [format(b o d d n++i --) prec 82] .

  op alias_:=_ : Pattern Pattern -> Declaration 
     [prec 82] .
  op alias`{_`}_:=_ : SortList Pattern Pattern -> Declaration 
     [prec 82] .

  var OH : ObjectHead . var MH : MetaHead .

  ---- Help Maude parse empty lists.

  op symbol_`(`):_ : ObjectHead ObjectSort -> Declaration 
     [format(b o d d s d d) prec 82] .
  eq symbol OH() : OS = symbol OH(.) : OS .
  
  op symbol_`(`):_ : MetaHead MetaSort -> Declaration 
     [format(b o d d s d d) prec 82] .
  eq symbol MH() : MS = symbol MH(.) : MS .




  ---- Defining the lifting bracket [[_]]

  ---- To define [[_]] more uniformly, we regard declarations with
  ---- no sort parameters as ones with empty list of sort parameters.

  eq axiom P:Pattern = axiom{.} P:Pattern .
  eq alias P:Pattern := Q:Pattern = alias{.} P:Pattern := Q:Pattern .



  
  op ERROR@AtomicMetaHead : -> [AtomicMetaHead] .
  op ERROR@VariableName   : -> [VariableName]   .


  var AOH : AtomicObjectHead .
  var AMH : AtomicMetaHead .


  ---- Lift a pattern
  op [[_]] : Pattern -> Pattern . 
  eq [[AOH(Ps)]] = [[AOH]]([[Ps]]) .
  eq [[AMH(Ps)]] = AMH([[Ps]]) .
 ceq [[PH{Ss}(Ps)]] = [[PH]]([[Ss]] @ [[Ps]])
  if isNeObjectSortList(Ss) .
 ceq [[PH{Ss}(Ps)]] = PH{Ss}([[Ps]])
  if isNeMetaSortList(Ss) .
  eq [[X:VariableName : OS]] = Kvariable([[X:VariableName]], [[OS]]) .
  eq [[X:VariableName : MS]] = X:VariableName : MS .
  eq [[S:String]] = S:String .

  ---- Lift a list of patterns by lifting each of them.
  op [[_]] : PatternList -> PatternList .
  eq [[(.).PatternList]] = . .
  eq [[P:Pattern, Ps]] = [[P:Pattern]], [[Ps]] . 

  ---- Lift an atomic object head by putting a "K" in front of it.
  op [[_]] : AtomicObjectHead -> AtomicMetaHead .
  eq [[AOH]] = downTerm(addK(upTerm(AOH)), ERROR@AtomicMetaHead) . 

  ---- Lift a parametric head by putting a "K" in front of it
  op [[_]] : ParametricHead -> AtomicMetaHead .
  eq [[PH]] = downTerm(addK(upTerm(PH)), ERROR@AtomicMetaHead) .

  ---- Lift an object sort to a pattern.
  op [[_]] : ObjectSort -> Pattern .

  var AOS : AtomicObjectSort .

  ---- Lift an atomic object sort by putting a "K" in front of it
  ----   [[Nat]] = KNat()
  ----   [[Bool]] = KBool()
  eq [[AOS]] = downTerm(addK(upTerm(AOS)), ERROR@AtomicMetaHead) () .

  var POS : ParametricObjectSort .

  ---- Lifting a parametric sort by putting a "K" in front of it
  op [[_]] : ParametricObjectSort -> AtomicMetaHead .
  eq [[POS]] = downTerm(addK(upTerm(POS)), ERROR@AtomicMetaHead) .
  eq [[POS{Ss}]] = [[POS]]([[Ss]]) .

  ---- Lifting an object sort variable:
  ----   [[S]] = S : KSort
  eq [[S:ObjectSortVariable]]
   = (downTerm(
        qid(string(getName(upTerm(S:ObjectSortVariable)))
            + ".VariableName"), 
        ERROR@VariableName)) : KSort .

  ---- Lifting a list of object sorts by lifting each of them.
  op [[_]] : SortList -> PatternList .
  eq [[(.).SortList]] = . .
  eq [[OS, Ss]] = [[OS]], [[Ss]] .

  ---- Lifting a variable name to its string representation.
  op [[_]] : VariableName -> String .
  eq [[X:VariableName]] = string(getName(upTerm(X:VariableName))) .

  ---- Lifting a declaration to declaration(s) 
  op [[_]] : Declarations -> Declarations .
  eq [[Decl Decls]] = [[Decl]] @ [[Decls]] .

 ---- Lifting sort declarations
 ceq [[sort OS]] 
   = axiom KisSort([[OS]])
     axiom equals{KSort, KS}(
             [[OS]],
             Ksort(name(OS), ListOfKSortToKSortList(Ps)))
  if MH(Ps) := [[OS]] .
  ---- Calculating the names (strings) of atomic object sorts and
  ---- parametric sorts.
  ---- For example, name(Nat) = "Nat", name(List{...}) = "List".
  op name : ObjectSort -> String .
  op name : ParametricObjectSort -> String .
  eq name(AOS) = string(getName(upTerm(AOS))) .
  eq name(POS) = string(getName(upTerm(POS))) .
  eq name(POS{Ss}) = name(POS) .
  ---- Convert a list of meta-level patterns (whose sorts are KSort)
  ---- to one meta-level pattern of the sort KSortList . 
  ---- KnilKSortList and KconsKSortList are constructors of KSortList.
  op ListOfKSortToKSortList : PatternList -> Pattern .
  eq ListOfKSortToKSortList(.) = KnilKSortList() .
  eq ListOfKSortToKSortList(P:Pattern) 
   = KconsKSortList(P:Pattern, KnilKSortList()) .
  eq ListOfKSortToKSortList(P:Pattern, Ps)
   = KconsKSortList(P:Pattern, ListOfKSortToKSortList(Ps)) .


  ---- Lifting axiom declaration axiom{Ss} P.

  ---- Step 1: Get rid of object sort variables in Ss.
  ----         In fact, the object sort variables in the curly bracket
  ----         after the keyword "axiom" is of no use in this implementation,
  ----         because we already knew (defined) terminals of ObjectSortVariable
 ceq [[axiom{Ss} P:Pattern]]
   = [[axiom{deleteObjectSortVariable(Ss)} P:Pattern]]
  if hasObjectSortVariable(Ss) .
  op deleteObjectSortVariable : SortList -> SortList .
  eq deleteObjectSortVariable(.) = . .
  eq deleteObjectSortVariable(OS) = . .
  eq deleteObjectSortVariable(MS) = MS .
  eq deleteObjectSortVariable(OS, Ss) = deleteObjectSortVariable(Ss) .
  eq deleteObjectSortVariable(MS, Ss) = MS, deleteObjectSortVariable(Ss) .
  op hasObjectSortVariable : SortList -> Bool .
  eq hasObjectSortVariable(.) = false .
  eq hasObjectSortVariable(OS) = true .
  eq hasObjectSortVariable(MS) = false .
  eq hasObjectSortVariable(OS, Ss) = true .
  eq hasObjectSortVariable(MS, Ss) = hasObjectSortVariable(Ss) .


  ---- Step 2: Lift the pattern.
  eq [[axiom{Ss} P:Pattern]] = axiom{Ss} [[P:Pattern]] .
  

  ---- Lifting object symbols declarations: non-parametric case
  ---- [[symbol f(S1,...,Sn) : S]]
  ---- = symbol Kf(KPattern,...,KPattern) : KPattern
  ----   axiom Kf(P1,...,Pn) 
  ----         = Kapplication(Ksymbol("f", nil, (S1,...,Sn), S),
  ----                        (P1,...,Pn))
   
  eq [[symbol AOH(Ss) : OS]]
   = symbol [[AOH]](makeListOfKPattern(len(Ss))) : KPattern
     axiom equals{KPattern,KS}(
       [[AOH]](makeListOfKPatternVar(len(Ss))),
       Kapplication(
         makeKsymbol(AOH, Ss, OS),
         ListOfKPatternToKPatternList(makeListOfKPatternVar(len(Ss))))) .
  op makeKsymbol : AtomicObjectHead SortList ObjectSort -> Pattern .
  eq makeKsymbol(AOH, Ss, OS)
   = Ksymbol(name(AOH),
             KnilKSortList(),
             ListOfKSortToKSortList([[Ss]]),
             [[OS]]) .
  op name : AtomicObjectHead -> String .
  eq name(AOH) = string(getName(upTerm(AOH))) .
  ---- Some aux functions
  op makeListOfKPattern : Nat -> SortList . 
  eq makeListOfKPattern(0) = . .
  eq makeListOfKPattern(N:Nat) = KPattern, makeListOfKPattern(N:Nat + -1) .
  op makeKPatternVar : Nat -> Pattern .
  eq makeKPatternVar(N:Nat)
   = makeVariableName("P", N:Nat) : KPattern . 
  op makeVariableName : String Nat -> VariableName .
  eq makeVariableName(Prefix:String, N:Nat)
   = downTerm(
       qid(Prefix:String + string(N:Nat, 10) + ".VariableName"),
       ERROR@VariableName) .
  op makeListOfKPatternVar : Nat -> PatternList .
  eq makeListOfKPatternVar(0) = . .
  eq makeListOfKPatternVar(N:Nat)
   = makeListOfKPatternVar(N:Nat + -1) @ makeKPatternVar(N:Nat) .
  ---- Convert a list of meta-level patterns (whose sorts are KPattern)
  ---- to the meta-level pattern of sort KPatternList .
  op ListOfKPatternToKPatternList : PatternList -> Pattern .
  eq ListOfKPatternToKPatternList(.)
   = KnilKPatternList() .
  eq ListOfKPatternToKPatternList(P:Pattern)
   = KconsKPatternList(P:Pattern, KnilKPatternList()) .
  eq ListOfKPatternToKPatternList(P:Pattern, Ps)
   = KconsKPatternList(P:Pattern, ListOfKPatternToKPatternList(Ps)) .


  ---- Lifting object symbols declarations: parametric case
  ---- [[symbol f{S1...Sn}(T1...Tm) : S]]
  ---- = symbol Kf(KSort,..,KSort,KPattern,...,KPattern) : KPattern
  ---- = axiom Kf(S1,...,Sn,P1,...,Pn)
  ----         = Kapplication(
  ----             Ksymbol("f", (S1...Sn), (T1...Tn), S),
  ----             (P1...Pn)) 
  eq [[symbol PH{Ss}(Ss') : OS]]
   = symbol [[PH]](makeListOfKSort(len(Ss)) 
                 @ makeListOfKPattern(len(Ss'))) : KPattern
     axiom equals{KPattern,KS}(
       [[PH]]([[Ss]] @ makeListOfKPatternVar(len(Ss'))),
       Kapplication(
         Ksymbol(name(PH),
                 ListOfKSortToKSortList([[Ss]]),
                 ListOfKSortToKSortList([[Ss']]),
                 [[OS]]),
         ListOfKPatternToKPatternList(makeListOfKPatternVar(len(Ss'))))) .
  op name : ParametricHead -> String .
  eq name(PH) = string(getName(upTerm(PH))) .
  op makeListOfKSort : Nat -> SortList .
  eq makeListOfKSort(0) = . .
  eq makeListOfKSort(N:Nat) = KSort, makeListOfKSort(N:Nat + -1) .


  ---- Lifting object alias declarations: parametric case
  ---- For the same reason, object sort variables in the curly
  ---- bracket after "alias" is of no use in this implementation.
  ---- [[alias{...} g{S1...Sn}(P1...Pn) := Q]]
  ---- = symbol Kg(KSort,...,KSort,KPattern,...,KPattern) : KPattern
  ----   axiom Kg(S1,...,Sn,P1,...,Pn) = [[Q]]
 ceq [[alias{Ss} P:Pattern := Q:Pattern]]
   = [[alias{deleteObjectSortVariable(Ss)} P:Pattern := Q:Pattern]]
  if hasObjectSortVariable(Ss) .

 ceq [[alias{Ss'} PH{Ss}(Ps) := Q:Pattern]]
   = symbol [[PH]](makeListOfKSort(len(Ss))
                 @ makeListOfKPattern(len(Ps))) : KPattern
     axiom{Ss'} equals{KPattern,KS}(
       [[PH]]([[Ss]] @ [[Ps]]),
       [[Q:Pattern]]) 
  if isNeObjectSortList(Ss) .



  ---- Lifting meta-level declarations: just keep them!
  eq [[symbol MH() : MS]] = symbol MH() : MS .
  eq [[symbol MH(Ss) : MS]] = symbol MH(Ss) : MS .




  ---- An aux function that takes anything to its corresponding
  ---- atomic meta head at the meta-theory. For example:
  ----   'plus.AtomicObjectHead     ---> 'Kplus.AtomicMetaHead
  ----   'cons.ParametricHead       ---> 'Kcons.AtomicMetaHead
  ----   'Nat.AtomicObjectSort      ---> 'KNat.AtomicMetaHead
  ----   'List.ParametricObjectSort ---> 'KList.AtomicMetaHead
  op addK : Constant -> Constant .
  eq addK(C:Constant) = qid("K" 
                            + string(getName(C:Constant)) 
                            + ".AtomicMetaHead") .




  op exists     : -> ParametricHead .
  op not        : -> ParametricHead .
  op and        : -> ParametricHead .
  op or         : -> ParametricHead .
  op implies    : -> ParametricHead .
  op iff        : -> ParametricHead .
  op equals     : -> ParametricHead .
  op forall     : -> ParametricHead .
  op ceil       : -> ParametricHead .
  op top        : -> ParametricHead .
  op bottom     : -> ParametricHead .

  op KPred        : -> MetaSort .
  op KChar        : -> MetaSort .
  op KString      : -> MetaSort .
  op KSort        : -> MetaSort .
  op KSortList    : -> MetaSort .
  op KSymbol      : -> MetaSort .
  op KSymbolList  : -> MetaSort .
  op KVariable    : -> MetaSort .
  op KPattern     : -> MetaSort .
  op KPatternList : -> MetaSort .

  op KS   : -> MetaSortVariable .
  op KisSort     : -> AtomicMetaHead .
  op KisSymbol   : -> AtomicMetaHead .
  op KgetSort   : -> AtomicMetaHead .

  op Kvariable  : -> AtomicMetaHead  .
  op Kexists    : -> AtomicMetaHead  .
  op Knot       : -> AtomicMetaHead  .
  op Kand       : -> AtomicMetaHead  .
  op Kor        : -> AtomicMetaHead  .
  op Kimplies   : -> AtomicMetaHead  .
  op Kiff       : -> AtomicMetaHead  .
  op Kequals    : -> AtomicMetaHead  .
  op Kforall    : -> AtomicMetaHead  .
  op Kbottom    : -> AtomicMetaHead  .
  op Ktop       : -> AtomicMetaHead  .


  op Ksort     : -> AtomicMetaHead .
  op Ksymbol   : -> AtomicMetaHead .
  op KnilKSortList : -> AtomicMetaHead .
  op KconsKSortList : -> AtomicMetaHead .
  op KnilKPatternList : -> AtomicMetaHead .
  op KconsKPatternList : -> AtomicMetaHead .
  op Kapplication : -> AtomicMetaHead .


endfm

