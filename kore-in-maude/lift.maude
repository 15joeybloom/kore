---- Lift any Kore modules to module K (the meta-theory).

in kore
in tokens

fmod LIFT is

  including KORE   .
  including TOKENS .
  including BOOL   .

  ---- Lift sorts

  ---- Lift to KString
  op liftAtomicSortToKString : AtomicSort -> String .
  op liftParSortToKString    : ParSort    -> String .

  ---- Check whether Sort is already one in the meta-level K.
  ---- Notice there are only a finite number of sorts in K.

  op sortIsMetaLevel : Sort -> Bool    .
  eq sortIsMetaLevel(KString            ) = true .
  eq sortIsMetaLevel(KSort              ) = true .
  eq sortIsMetaLevel(KSortList          ) = true .
  eq sortIsMetaLevel(KSymbol            ) = true .
  eq sortIsMetaLevel(KSymbolList        ) = true .
  eq sortIsMetaLevel(KVariable          ) = true .
  eq sortIsMetaLevel(KPattern           ) = true .
  eq sortIsMetaLevel(KPatternList       ) = true .
  eq sortIsMetaLevel(KSortSentence      ) = true .
  eq sortIsMetaLevel(KSortSentenceList  ) = true .
  eq sortIsMetaLevel(KSymbolSentence    ) = true .
  eq sortIsMetaLevel(KSymbolSentenceList) = true .
  eq sortIsMetaLevel(KAxiomSentence     ) = true .
  eq sortIsMetaLevel(KAxiomSentenceList ) = true .
  eq sortIsMetaLevel(KModule            ) = true .
  eq sortIsMetaLevel(KModuleList        ) = true .
  eq sortIsMetaLevel(S:Sort             ) = false [owise] .

  ---- Lift to KSort
  op liftSortToKSort : Sort -> Pattern .

  eq liftSortToKSort(S:AtomicSort) 
   = Ksort(liftAtomicSortToKString(S:AtomicSort), 
           KnilKSortList) .

  eq liftSortToKSort(PS:ParSort{Ss:SortList})
   = Ksort(liftParSortToKString(PS:ParSort), 
           liftSortListToKSortList(Ss:SortList)) .

  ---- Lift to KSortList 
  op liftSortListToKSortList : SortList -> Pattern .

  eq liftSortListToKSortList(S:Sort)
   = KconsKSortList(liftSortToKSort(S:Sort), KnilKSortList) .

  eq liftSortListToKSortList(S:Sort, S':Sort)
   = KconsKSortList(liftSortToKSort(S:Sort), liftSortListToKSortList(S':Sort)) .

  eq liftSortListToKSortList(S:Sort, Ss:SortList)
   = KconsKSortList(liftSortToKSort(S:Sort), liftSortListToKSortList(Ss:SortList)) .


  ---- Lift symbols 

  ---- Check whether Symbol is one at the meta-theory K.
  ---- Notice there are only a finite number of them.

  op symbolidIsMetaLevel : SymbolId -> Bool .

  ---- The following equations are in correspondence to
  ---- symbols terminals in K, defined in tokens.maude

  eq symbolidIsMetaLevel(Ksort         ) = true .
  eq symbolidIsMetaLevel(KnilKSortList ) = true .
  eq symbolidIsMetaLevel(KconsKSortList) = true .

  eq symbolidIsMetaLevel(Ksymbolid     ) = true .
  eq symbolidIsMetaLevel(Ksymbol       ) = true .

  eq symbolidIsMetaLevel(Kvariable     ) = true .
  eq symbolidIsMetaLevel(Kapplication  ) = true .
  eq symbolidIsMetaLevel(Kand          ) = true .
  eq symbolidIsMetaLevel(Knot          ) = true .
  eq symbolidIsMetaLevel(Kexists       ) = true .

  eq symbolidIsMetaLevel(Kequals       ) = true .

  eq symbolidIsMetaLevel(KgetSort      ) = true .
  eq symbolidIsMetaLevel(Kceil         ) = true .
  eq symbolidIsMetaLevel(Ktrue         ) = true .
  eq symbolidIsMetaLevel(Kfalse        ) = true .
  eq symbolidIsMetaLevel(KandBool      ) = true .
  eq symbolidIsMetaLevel(KnotBool      ) = true .
  eq symbolidIsMetaLevel(Kzero         ) = true .
  eq symbolidIsMetaLevel(Ksucc         ) = true .
  eq symbolidIsMetaLevel(Kplus         ) = true .
  eq symbolidIsMetaLevel(Kgte          ) = true .
  eq symbolidIsMetaLevel(Knil          ) = true .
  eq symbolidIsMetaLevel(Kcons         ) = true .
  eq symbolidIsMetaLevel(Kctxtapp      ) = true .
  eq symbolidIsMetaLevel(Kgamma0       ) = true .
  eq symbolidIsMetaLevel(KNatToAExp    ) = true .
  eq symbolidIsMetaLevel(KIdToAExp     ) = true .
  eq symbolidIsMetaLevel(KplusAExp     ) = true .
  eq symbolidIsMetaLevel(Kite          ) = true .
  eq symbolidIsMetaLevel(S:SymbolId    ) = false [owise] .

  ---- Lift to KString
  op liftAtomicConstSymbolIdToKString  : AtomicConstSymbolId  -> String .
  op liftAtomicNConstSymbolIdToKString : AtomicNConstSymbolId -> String .
  op liftParConstSymbolIdToKString     : ParConstSymbolId     -> String .
  op liftParNConstSymbolIdToKString    : ParNConstSymbolId    -> String .

  ---- Lift to KSymbol
  op liftSymbolIdToKSymbol : SymbolId -> Pattern .

  eq liftSymbolIdToKSymbol(S:AtomicConstSymbolId)
   = Ksymbolid(liftAtomicConstSymbolIdToKString(S:AtomicConstSymbolId),
               KnilKSortList) .

  eq liftSymbolIdToKSymbol(S:AtomicNConstSymbolId)
   = Ksymbolid(liftAtomicNConstSymbolIdToKString(S:AtomicNConstSymbolId),
               KnilKSortList) .

  eq liftSymbolIdToKSymbol(P:ParConstSymbolId{Ss:SortList})
   = Ksymbolid(liftParConstSymbolIdToKString(P:ParConstSymbolId),
               liftSortListToKSortList(Ss:SortList)) .

  eq liftSymbolIdToKSymbol(P:ParNConstSymbolId{Ss:SortList})
   = Ksymbolid(liftParNConstSymbolIdToKString(P:ParNConstSymbolId),
               liftSortListToKSortList(Ss:SortList)) .


  ---- Lift Alias

  ---- I think whether an alias is meta-level or not
  ---- should be infered by its definition. 
  ---- Also there are alias(es) which could be seen
  ---- as meta-level or object-level.
  ---- For now let's define lifting of alias manually.

  op aliasidIsMetaLevel : AliasId -> Bool .
---(
  \or      
  \implies
  \if        
  \equals   
  \forall     
---)




  ---- Lift VariableName to KString
  op liftVariableNameToKString : VariableName -> String .

  ---- Check whether Variable is at meta-level K.
  op variableIsMetaLevel : Variable -> Bool .
  eq variableIsMetaLevel(X:VariableName : S:Sort)
   = sortIsMetaLevel(S:Sort) .

  ---- Lift Variable to KVariable
  ----   X:S  ---lift---> Kvariable("X", Ksort("S",...)) if S is object-level
  ----   X:S  ---lift---> X:S                            if S is meta-level
  op liftVariableToKVariable : Variable -> Pattern .

 ceq liftVariableToKVariable(X:VariableName : S:Sort)
   = Kvariable(liftVariableNameToKString(X:VariableName),
               liftSortToKSort(S:Sort))
  if not variableIsMetaLevel(X:VariableName : S:Sort) .

 ceq liftVariableToKVariable(X:VariableName : S:Sort)
   = X:VariableName : S:Sort  
  if variableIsMetaLevel(X:VariableName : S:Sort) . 

 
  ---- Lift patterns and lists of patterns to KPattern
  op liftPatternToKPattern : Pattern -> Pattern .  ---- Equations defined later .

  op liftPatternListToKPattern : PatternList -> Pattern .

  eq liftPatternListToKPattern(P:Pattern)
   = KconsKPatternList(liftPatternListToKPattern(P:Pattern),
                       KnilKPatternList) .

  eq liftPatternListToKPattern(P:Pattern, Ps:PatternList)
   = KconsKPatternList(liftPatternListToKPattern(P:Pattern),
     liftPatternListToKPattern(Ps:PatternList)) .

  ---- Map liftPatternToKPattern on a list of patterns:
  op liftPatternToKPattern-MapOnList : PatternList -> PatternList .

  eq liftPatternToKPattern-MapOnList(P:Pattern)
   = liftPatternToKPattern(P:Pattern) .

  eq liftPatternToKPattern-MapOnList(P:Pattern, Ps:PatternList)
   = liftPatternToKPattern(P:Pattern),
     liftPatternToKPattern-MapOnList(Ps:PatternList) .

  ---- Check whether Pattern is at meta-level K.
  op patternIsMetaLevel : Pattern -> Bool .

  eq patternIsMetaLevel(Var:Variable)
   = variableIsMetaLevel(Var:Variable) .

  eq patternIsMetaLevel(ConstSigma:ConstSymbolId)
   = symbolidIsMetaLevel(ConstSigma:ConstSymbolId) .

  ---- Whether a Pattern Sigma(P1,...,Pn) is meta-level
  ---- only depends on whether Sigma is a meta-level symbol,
  ---- and has nothing to do with its arguments P1, ..., Pn.
  eq patternIsMetaLevel(Sigma:NConstSymbolId(Ps:PatternList))
   = symbolidIsMetaLevel(Sigma:NConstSymbolId) .

  eq patternIsMetaLevel(\not{S:Sort}(P:Pattern))
   = patternIsMetaLevel(P:Pattern) .

  eq patternIsMetaLevel(\and{S:Sort}(P1:Pattern, P2:Pattern))
   = patternIsMetaLevel(P1:Pattern) and patternIsMetaLevel(P2:Pattern) .

  eq patternIsMetaLevel(\exists{S1:Sort, S2:Sort}(Var:Variable, P:Pattern))
   = patternIsMetaLevel(P:Pattern) and variableIsMetaLevel(Var:Variable) .

  eq patternIsMetaLevel(Str:String)
   = true .

  eq patternIsMetaLevel(P:Pattern)
   = false [owise] .


  ---- Lift to KPattern.

  eq liftPatternToKPattern(Var:Variable)
   = liftVariableToKVariable(Var:Variable) .

 ceq liftPatternToKPattern(ConstSigma:ConstSymbolId)
   = ConstSigma:ConstSymbolId
  if symbolidIsMetaLevel(ConstSigma:ConstSymbolId) .

 ceq liftPatternToKPattern(ConstSigma:ConstSymbolId)
   = Kapplication(liftSymbolIdToKSymbol(ConstSigma:ConstSymbolId),
                  KnilKPatternList) 
  if not symbolidIsMetaLevel(ConstSigma:ConstSymbolId) .

 ceq liftPatternToKPattern(Sigma:NConstSymbolId(Ps:PatternList))
   = Sigma:NConstSymbolId(liftPatternToKPattern-MapOnList(Ps:PatternList))
  if symbolidIsMetaLevel(Sigma:NConstSymbolId) .

 ceq liftPatternToKPattern(Sigma:NConstSymbolId(Ps:PatternList))
   = Kapplication(liftSymbolIdToKSymbol(Sigma:NConstSymbolId),
                  liftPatternListToKPattern(Ps:PatternList))
  if not symbolidIsMetaLevel(Sigma:NConstSymbolId) .

 ceq liftPatternToKPattern(\not{S:Sort}(P:Pattern))
   = \not{S:Sort}(liftPatternToKPattern(P:Pattern))
  if patternIsMetaLevel(\not{S:Sort}(P:Pattern)) .

 ceq liftPatternToKPattern(\not{S:Sort}(P:Pattern))
   = Knot(liftSortToKSort(S:Sort),
          liftPatternToKPattern(P:Pattern))
  if not patternIsMetaLevel(\not{S:Sort}(P:Pattern)) .

 ceq liftPatternToKPattern(\and{S:Sort}(P1:Pattern, P2:Pattern))
   = \and{S:Sort}(liftPatternToKPattern(P1:Pattern),
                  liftPatternToKPattern(P2:Pattern))
  if patternIsMetaLevel(\and{S:Sort}(P1:Pattern, P2:Pattern)) .

 ceq liftPatternToKPattern(\and{S:Sort}(P1:Pattern, P2:Pattern))
   = Kand(liftSortToKSort(S:Sort),
          liftPatternToKPattern(P1:Pattern),
          liftPatternToKPattern(P2:Pattern))
  if not patternIsMetaLevel(\and{S:Sort}(P1:Pattern, P2:Pattern)) .

 ceq liftPatternToKPattern(\exists{S1:Sort, S2:Sort}(V:Variable, P:Pattern))
   = \exists{S1:Sort, S2:Sort}(liftVariableToKVariable(V:Variable),  --- shouldn't change
                               liftPatternToKPattern(P:Pattern))
  if patternIsMetaLevel(\exists{S1:Sort, S2:Sort}(V:Variable, P:Pattern)) .

 ceq liftPatternToKPattern(\exists{S1:Sort, S2:Sort}(V:Variable, P:Pattern))
   = Kexists(liftSortToKSort(S1:Sort),
             liftSortToKSort(S2:Sort),
             liftVariableToKVariable(V:Variable),
             liftPatternToKPattern(P:Pattern))
  if not patternIsMetaLevel(\exists{S1:Sort, S2:Sort}(V:Variable, P:Pattern)) .



  ---- Lifting: terminals to terminals.

  ---- Lifting atomic sorts terminals. 
  eq  liftAtomicSortToKString((Nat).AtomicSort)  = "Nat"  .
  eq  liftAtomicSortToKString((Bool).AtomicSort) = "Bool" .
  eq  liftAtomicSortToKString((AExp).AtomicSort) = "AExp" .
  eq  liftAtomicSortToKString((BExp).AtomicSort) = "BExp" .
  eq  liftAtomicSortToKString((Stmt).AtomicSort) = "Stmt" .

  ---- Lifting sort variables to terminals.
  eq  liftSortToKSort((S).SortVar )      = S  : KSort     .
  eq  liftSortToKSort((S').SortVar)      = S' : KSort     .
  eq  liftSortToKSort((S1).SortVar)      = S1 : KSort     .
  eq  liftSortToKSort((S2).SortVar)      = S2 : KSort     .
  eq  liftSortToKSort((S3).SortVar)      = S3 : KSort     .

  ---- Lifting parametric sort constructors to terminals.
  eq  liftParSortToKString(List)         = "List"       .
  eq  liftParSortToKString(Ctxt)         = "Ctxt"       .

  ---- Lifting AtomicConstSymbolId terminals to KString
  eq  liftAtomicConstSymbolIdToKString(true)  = "true"  .
  eq  liftAtomicConstSymbolIdToKString(false) = "false" .
  eq  liftAtomicConstSymbolIdToKString(zero)  = "zero"  .

  ---- Lifting AtomicNConstSymbolId terminals to KString
  eq  liftAtomicNConstSymbolIdToKString(andBool)   = "andBool" .
  eq  liftAtomicNConstSymbolIdToKString(notBool)   = "notBool" .
  eq  liftAtomicNConstSymbolIdToKString(NatToAExp) = "NatToAExp" .
  eq  liftAtomicNConstSymbolIdToKString(IdToAExp)  = "IdToAExp" .
  eq  liftAtomicNConstSymbolIdToKString(plusAExp)  = "plusAExp" .
  eq  liftAtomicNConstSymbolIdToKString(ite)       = "ite" .

  ---- Lifting ParConstSymbolId terminals to KString
  eq  liftParConstSymbolIdToKString(nil) = "nil" .

  ---- Lifting ParNConstSymbolId terminals to KString
  eq  liftParNConstSymbolIdToKString(ceil)    = "ceil"    .
  eq  liftParNConstSymbolIdToKString(cons)    = "cons"    .
  eq  liftParNConstSymbolIdToKString(ctxtapp) = "ctxtapp" .
  eq  liftParNConstSymbolIdToKString(gamma0)  = "gamma0"  .

  ---- Lifting VariableName terminals to KString
  eq  liftVariableNameToKString(B   ) = "B" .
  eq  liftVariableNameToKString(S   ) = "S" .    
  eq  liftVariableNameToKString(R   ) = "R" .    
  eq  liftVariableNameToKString(X   ) = "X" .      
  eq  liftVariableNameToKString(C   ) = "C" .    
  eq  liftVariableNameToKString(P   ) = "P" .           
  eq  liftVariableNameToKString(HOLE) = "HOLE" .             
  eq  liftVariableNameToKString(E   ) = "E" .    
  eq  liftVariableNameToKString(S'  ) = "S'" .    
  eq  liftVariableNameToKString(Y   ) = "Y" .    
  eq  liftVariableNameToKString(C1  ) = "C1" .    
  eq  liftVariableNameToKString(Q   ) = "Q" .    
  eq  liftVariableNameToKString(S1  ) = "S1" .    
  eq  liftVariableNameToKString(Z   ) = "Z" .    
  eq  liftVariableNameToKString(C2  ) = "C2" .    
  eq  liftVariableNameToKString(S2  ) = "S2" .    
  eq  liftVariableNameToKString(L   ) = "L" .    
  eq  liftVariableNameToKString(C'  ) = "C'" .    
  eq  liftVariableNameToKString(S3  ) = "S3" .    
  eq  liftVariableNameToKString(L0  ) = "L0" .    
  eq  liftVariableNameToKString(C'' ) = "C''" .    

endfm




---- test lift ----

reduce

liftSortToKSort(Ctxt{Bool, List{Nat, List{Nat}}, List{S1, S2, List{S3}}})

.

reduce

liftSymbolIdToKSymbol(gamma0{List{S}, List{Bool, Nat}})

.

reduce

liftVariableToKVariable(B:Bool)

.

reduce

liftVariableToKVariable(C:KPattern)

.

reduce

liftPatternToKPattern(

\not{Bool}(\and{Bool}(true, false))

)

.

quit
