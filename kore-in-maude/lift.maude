---- Lift any Kore modules to module K (the meta-theory).

in kore
in tokens

fmod LIFT is

  including KORE   .
  including TOKENS .

  ---- lift a sort
  op lift     : Sort     -> Pattern .  ---- defined in the end of this module
  op lift     : ParSort  -> String  .  ---- defined in the end of this module

  ---- lift a sort list
  op liftlist : SortList -> Pattern .
  eq liftlist(S:Sort)
   = KconsKSortList(lift(S:Sort), KnilKSortList) .
  eq liftlist(S:Sort, S':Sort)
   = KconsKSortList(lift(S:Sort), liftlist(S':Sort)) .
  eq liftlist(S:Sort, Ss:SortList)
   = KconsKSortList(lift(S:Sort), liftlist(Ss:SortList)) .

  ---- lift a parametric sort
  eq lift(PS:ParSort{Ss:SortList})
   = Kparsort(lift(PS:ParSort), liftlist(Ss:SortList)) . 
   
 
  ---- Lifting: terminals to terminals.

  ---- Lifting atomic sorts terminals. 
  eq  lift(Nat)       = Ksort("Nat")            .
  eq  lift(Bool)      = Ksort("Bool")           .
  eq  lift(AExp)      = Ksort("AExp")           .
  eq  lift(BExp)      = Ksort("BExp")           .
  eq  lift(Stmt)      = Ksort("Stmt")           .

  ---- Lifting sort variables to terminals.
  eq  lift(S)         = S  : KSort              .
  eq  lift(S')        = S' : KSort              .
  eq  lift(S1)        = S1 : KSort              .
  eq  lift(S2)        = S2 : KSort              .
  eq  lift(S3)        = S3 : KSort              .

  ---- Lifting parametric sort constructors to terminals.
  eq  lift(List)      = "List"                  .
  eq  lift(Ctxt)      = "Ctxt"                  .

  ---- 
  ---(
  op  KPattern        : -> AtomicSort           .
  op  KSort           : -> AtomicSort           .
  op  KSymbol         : -> AtomicSort           .
  ---)

endfm


---- test lift ----

reduce

lift(Nat) 

.

reduce

lift(Nat, Bool, Bool)

.

reduce 

lift(List{Bool})

.

reduce

lift(Ctxt{Bool, List{Nat, List{Nat}}, List{S1, S2, List{S3}}})

.


quit
