---- Lift any Kore modules to module K (the meta-theory).

in kore
in tokens

fmod LIFT is

  including KORE   .
  including TOKENS .

  ---- Lift sorts

  ---- Lift to KString
  op liftAtomicSortToKString : AtomicSort -> String .
  op liftParSortToKString    : ParSort    -> String .

  ---- Lift to KSort
  op liftSortToKSort : Sort -> Pattern .

  eq liftSortToKSort(S:AtomicSort) 
   = Ksort(liftAtomicSortToKString(S:AtomicSort), 
           KnilKSortList) .

  eq liftSortToKSort(PS:ParSort{Ss:SortList})
   = Ksort(liftParSortToKString(PS:ParSort), 
           liftSortListToKSortList(Ss:SortList)) .

  ---- Lift to KSortList 
  op liftSortListToKSortList : SortList -> Pattern .

  eq liftSortListToKSortList(S:Sort)
   = KconsKSortList(liftSortToKSort(S:Sort), KnilKSortList) .

  eq liftSortListToKSortList(S:Sort, S':Sort)
   = KconsKSortList(liftSortToKSort(S:Sort), liftSortListToKSortList(S':Sort)) .

  eq liftSortListToKSortList(S:Sort, Ss:SortList)
   = KconsKSortList(liftSortToKSort(S:Sort), liftSortListToKSortList(Ss:SortList)) .


  ---- Lift symbols 


  ---- Lift to KString
  op liftAtomicConstSymbolIdToKString  : AtomicConstSymbolId  -> String .
  op liftAtomicNConstSymbolIdToKString : AtomicNConstSymbolId -> String .
  op liftParConstSymbolIdToKString     : ParConstSymbolId     -> String .
  op liftParNConstSymbolIdToKString    : ParNConstSymbolId    -> String .

  ---- Lift to KSymbolId
  op liftAtomicConstSymbolId : AtomicConstSymbolId 
  

---(
  op liftSymbolIdToKSymbolPattern : SymbolId -> Pattern .


  ---- Examples:
  ----   plus    ----lift---->   Kplus = Ksymbolid("plus", ...)
  ----   zero    ----lift---->   Kzero = Ksymbolid("zero", ...)
  ----   cons{S} ----lift---->   Kcons = Ksymbolid("cons", (S), ...)
  op liftParSymbolId : ParConstSymbolId   -> String  .
  op liftParSymbolId : ParNConstSymbolId  -> String  .
  ---- defined for each terminals in the end of this module.

  eq liftSymbolIdToKSymbolPattern(PS:ParConstSymbolId{Ss:SortList})
   = 
---)
   

  ---- Lifting: terminals to terminals.

  ---- Lifting atomic sorts terminals. 
  eq  liftAtomicSortToKString((Nat).AtomicSort)  = "Nat"  .
  eq  liftAtomicSortToKString((Bool).AtomicSort) = "Bool" .
  eq  liftAtomicSortToKString((AExp).AtomicSort) = "AExp" .
  eq  liftAtomicSortToKString((BExp).AtomicSort) = "BExp" .
  eq  liftAtomicSortToKString((Stmt).AtomicSort) = "Stmt" .

  ---- Lifting sort variables to terminals.
  eq  liftSortToKSort((S).SortVar )      = S  : KSort     .
  eq  liftSortToKSort((S').SortVar)      = S' : KSort     .
  eq  liftSortToKSort((S1).SortVar)      = S1 : KSort     .
  eq  liftSortToKSort((S2).SortVar)      = S2 : KSort     .
  eq  liftSortToKSort((S3).SortVar)      = S3 : KSort     .

  ---- Lifting parametric sort constructors to terminals.
  eq  liftParSortToKString(List)         = "List"       .
  eq  liftParSortToKString(Ctxt)         = "Ctxt"       .

  ---- Lifting AtomicConstSymbolId terminals to KString
  eq  liftAtomicConstSymbolIdToKString(true)  = "true"  .
  eq  liftAtomicConstSymbolIdToKString(false) = "false" .
  eq  liftAtomicConstSymbolIdToKString(zero)  = "zero"  .

  ---- Lifting AtomicNConstSymbolId terminals to KString
  eq  liftAtomicNConstSymbolIdToKString(andBool)   = "andBool" .
  eq  liftAtomicNConstSymbolIdToKString(notBool)   = "notBool" .
  eq  liftAtomicNConstSymbolIdToKString(NatToAExp) = "NatToAExp" .
  eq  liftAtomicNConstSymbolIdToKString(IdToAExp)  = "IdToAExp" .
  eq  liftAtomicNConstSymbolIdToKString(plusAExp)  = "plusAExp" .
  eq  liftAtomicNConstSymbolIdToKString(ite)       = "ite" .

  ---- Lifting ParConstSymbolId terminals to KString
  eq  liftParConstSymbolIdToKString(nil) = "nil" .

  ---- Lifting ParNConstSymbolId terminals to KString
  eq  liftParNConstSymbolIdToKString(ceil)    = "ceil"    .
  eq  liftParNConstSymbolIdToKString(cons)    = "cons"    .
  eq  liftParNConstSymbolIdToKString(ctxtapp) = "ctxtapp" .
  eq  liftParNConstSymbolIdToKString(gamma0)  = "gamma0"  .

endfm


---- test lift ----

reduce

liftSortToKSort(Ctxt{Bool, List{Nat, List{Nat}}, List{S1, S2, List{S3}}})

.


quit
